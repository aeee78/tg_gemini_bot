name: Deploy to Server

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      TARGET_SERVER_IP: ${{ secrets.SERVER_IP }}
      TARGET_SERVER_SSH_PORT_FROM_SECRET: ${{ secrets.SERVER_SSH_PORT }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SERVER_SSH_KEY }}

      - name: Create project directory on server and copy files
        run: |
          EFFECTIVE_SSH_PORT=${TARGET_SERVER_SSH_PORT_FROM_SECRET:-22}
          echo "Using SSH Port: $EFFECTIVE_SSH_PORT"

          ssh -p "$EFFECTIVE_SSH_PORT" -o StrictHostKeyChecking=no root@$TARGET_SERVER_IP "mkdir -p /home/tg_gemini_bot"
          rsync -avz --delete \
            --exclude 'venv/' \
            --exclude '.venv/' \
            --exclude '.env' \
            --exclude '.git/' \
            --exclude '.github/' \
            --exclude 'whitelist.txt' \
            -e "ssh -p \"$EFFECTIVE_SSH_PORT\" -o StrictHostKeyChecking=no" . root@$TARGET_SERVER_IP:/home/tg_gemini_bot/

      - name: Deploy and Run Application on Server
        run: |
          EFFECTIVE_SSH_PORT=${TARGET_SERVER_SSH_PORT_FROM_SECRET:-22}
          echo "Using SSH Port for deployment script: $EFFECTIVE_SSH_PORT"

          ssh -p "$EFFECTIVE_SSH_PORT" -o StrictHostKeyChecking=no root@$TARGET_SERVER_IP << 'EOF'
            set -e

            PROJECT_DIR="/home/tg_gemini_bot"
            PYTHON_VERSION="python3.13"
            SERVICE_NAME="tg_gemini_bot.service"
            UV_INSTALL_PARENT_DIR="$HOME/.local"
            UV_BIN_DIR="$UV_INSTALL_PARENT_DIR/bin"
            UV_ENV_FILE="$UV_BIN_DIR/env"

            echo "--- Updating package list and installing dependencies ---"
            export DEBIAN_FRONTEND=noninteractive
            apt-get update -y
            apt-get install -y rsync ${PYTHON_VERSION}-venv curl sudo git

            echo "--- Installing/Updating uv ---"
            if ! [ -x "$UV_BIN_DIR/uv" ] && ! command -v uv &> /dev/null; then
              echo "uv not found, installing..."
              curl -LsSf https://astral.sh/uv/install.sh | sh

              if [ -f "$UV_ENV_FILE" ]; then
                echo "Sourcing $UV_ENV_FILE to add uv to PATH."
                source "$UV_ENV_FILE"
              elif [ -d "$UV_BIN_DIR" ]; then
                echo "File $UV_ENV_FILE not found, but $UV_BIN_DIR exists. Adding $UV_BIN_DIR to PATH manually."
                export PATH="$UV_BIN_DIR:$PATH"
              else
                echo "Warning: uv installation might have failed or $UV_BIN_DIR was not created."
              fi
            else
              echo "uv is already installed or in PATH."

              if [ -f "$UV_ENV_FILE" ] && [[ ":$PATH:" != *":$UV_BIN_DIR:"* ]]; then
                echo "Sourcing $UV_ENV_FILE to ensure uv from $UV_BIN_DIR is in PATH."
                source "$UV_ENV_FILE"
              elif [ -d "$UV_BIN_DIR" ] && [[ ":$PATH:" != *":$UV_BIN_DIR:"* ]]; then
                 echo "Adding $UV_BIN_DIR to PATH as it's not present."
                 export PATH="$UV_BIN_DIR:$PATH"
              fi
            fi


            if ! command -v uv &> /dev/null; then
               echo "ERROR: uv command still not found after attempting install/sourcing."
               echo "Current PATH: $PATH"
               echo "Expected uv in: $UV_BIN_DIR"

               if [ -d "$UV_BIN_DIR" ]; then
                 echo "Contents of $UV_BIN_DIR:"
                 ls -la "$UV_BIN_DIR"
               fi
               if [ -d "$HOME/.cargo/bin" ]; then
                 echo "Contents of $HOME/.cargo/bin:"
                 ls -la "$HOME/.cargo/bin"
               fi
               exit 1
            fi
            echo "uv version: $(uv --version)"

            echo "--- Navigating to project directory: $PROJECT_DIR ---"
            cd $PROJECT_DIR

            echo "--- Setting up Python virtual environment with uv ---"
            uv venv --python $PYTHON_VERSION .venv

            echo "--- Activating virtual environment ---"
            source .venv/bin/activate

            echo "--- Compiling requirements.in to get latest package versions ---"
            uv pip compile requirements.in -o requirements.txt

            echo "--- Syncing Python dependencies from newly generated requirements.txt ---"
            uv pip sync requirements.txt

            echo "--- Managing systemd service ---"
            echo "IMPORTANT: Assuming $SERVICE_NAME is already present in /etc/systemd/system/"

            echo "--- Reloading systemd, enabling and restarting service ---"
            systemctl daemon-reload
            systemctl enable $SERVICE_NAME
            systemctl restart $SERVICE_NAME

            echo "--- Checking service status ---"
            sleep 5
            systemctl status $SERVICE_NAME --no-pager || echo "Warning: Service status check indicated an issue. Please check logs on the server: journalctl -u $SERVICE_NAME -f"

            echo "--- Deployment finished successfully! ---"
          EOF
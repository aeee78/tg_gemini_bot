import io

import requests
import telebot
from dotenv import load_dotenv
from google import genai
from google.genai import types as genai_types
from google.genai.types import GenerateContentConfig, GoogleSearch, Tool
from PIL import Image

from constants import (
    COMMAND_LIST,
    DEFAULT_MODEL,
    GEMINI_API_KEY,
    GREETING_MESSAGE_TEMPLATE,
    MAX_FILE_SIZE_MB,
    QUICK_TOOLS_CONFIG,
    SEND_MODE_IMMEDIATE,
    SEND_MODE_MANUAL,
    SUPPORTED_MIME_TYPES,
    TELEGRAM_TOKEN,
    get_model_alias,
)
from image_generation import generate_image_direct
from keyboards import (
    get_file_download_keyboard,
    get_main_keyboard,
    get_model_selection_keyboard,
)
from utils import markdown_to_text, split_long_message


load_dotenv()

client = genai.Client(api_key=GEMINI_API_KEY)
bot = telebot.TeleBot(TELEGRAM_TOKEN)

bot.set_my_commands(COMMAND_LIST)


user_chats = {}
user_models = {}
user_last_responses = {}
user_send_modes = {}
user_message_buffer = {}
user_files_context = {}
user_search_enabled = {}


def download_telegram_image(file_id):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ Telegram."""
    file_info = bot.get_file(file_id)
    file_url = (
        f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{file_info.file_path}"
    )
    response = requests.get(file_url)
    return io.BytesIO(response.content)


def send_text_as_file(chat_id, text, filename="response.txt"):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞."""
    file_obj = io.BytesIO(text.encode("utf-8"))
    bot.send_document(
        chat_id,
        file_obj,
        caption="–í–∞—à –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç",
        visible_file_name=filename,
    )


@bot.message_handler(commands=["start"])
def send_welcome(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start."""
    user_id = message.from_user.id
    user_models[user_id] = DEFAULT_MODEL
    user_chats[user_id] = client.chats.create(model=user_models[user_id])
    user_last_responses[user_id] = None
    user_send_modes[user_id] = SEND_MODE_IMMEDIATE
    user_message_buffer[user_id] = []
    user_files_context[user_id] = []
    user_search_enabled[user_id] = False

    search_enabled = user_search_enabled[user_id]
    current_model = user_models[user_id]
    search_status_text = "–í–∫–ª ‚úÖ" if search_enabled else "–í—ã–∫–ª ‚ùå"

    greeting_text = GREETING_MESSAGE_TEMPLATE.format(
        model_name=get_model_alias(current_model),
        send_mode=user_send_modes[user_id],
        search_status=search_status_text,
        send_mode_immediate=SEND_MODE_IMMEDIATE,
        send_mode_manual=SEND_MODE_MANUAL,
    )

    bot.send_message(
        message.chat.id,
        greeting_text,
        reply_markup=get_main_keyboard(
            user_id, user_send_modes, search_enabled, current_model
        ),
        parse_mode="Markdown",
    )


@bot.message_handler(func=lambda message: message.text == "–ù–æ–≤—ã–π —á–∞—Ç")
def new_chat(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–æ–≤—ã–π —á–∞—Ç"."""
    user_id = message.from_user.id

    if user_id not in user_models:
        user_models[user_id] = DEFAULT_MODEL

    user_chats[user_id] = client.chats.create(model=user_models[user_id])
    user_last_responses[user_id] = None
    user_files_context[user_id] = []
    user_message_buffer[user_id] = []
    user_search_enabled[user_id] = user_search_enabled.get(user_id, False)

    current_mode = user_send_modes.get(user_id, SEND_MODE_IMMEDIATE)
    search_enabled = user_search_enabled[user_id]
    current_model = user_models[user_id]
    search_status = "–í–∫–ª ‚úÖ" if search_enabled else "–í—ã–∫–ª ‚ùå"

    bot.send_message(
        message.chat.id,
        f"–ù–∞—á–∞—Ç –Ω–æ–≤—ã–π —á–∞—Ç. –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –æ—á–∏—â–µ–Ω.\n\n"
        f"–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {get_model_alias(current_model)}\n"
        f"–†–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏: {current_mode}\n"
        f"–ü–æ–∏—Å–∫ Google: {search_status}",
        reply_markup=get_main_keyboard(
            user_id, user_send_modes, search_enabled, current_model
        ),
    )


@bot.message_handler(
    func=lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å .MD üìÑ",
)
def get_response_as_md(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å .MD üìÑ"."""
    user_id = message.from_user.id

    if user_last_responses.get(user_id):
        words = user_last_responses[user_id].split()
        filename = "_".join(words[:3]) + ".md" if len(words) > 0 else "response.md"
        filename = filename.replace("/", "_").replace("\\", "_").replace(":", "_")

        send_text_as_file(
            message.chat.id,
            user_last_responses[user_id],
            filename,
        )
    else:
        search_enabled = user_search_enabled.get(user_id, False)
        current_model = user_models.get(user_id, DEFAULT_MODEL)
        bot.send_message(
            message.chat.id,
            "–£ –º–µ–Ω—è –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞.",
            reply_markup=get_main_keyboard(
                user_id, user_send_modes, search_enabled, current_model
            ),
        )


@bot.message_handler(func=lambda message: message.text.startswith("–†–µ–∂–∏–º:"))
def handle_send_mode(message):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""
    user_id = message.from_user.id
    chat_id = message.chat.id

    current_mode = user_send_modes.get(user_id, SEND_MODE_IMMEDIATE)

    new_mode = (
        SEND_MODE_MANUAL if current_mode == SEND_MODE_IMMEDIATE else SEND_MODE_IMMEDIATE
    )

    user_send_modes[user_id] = new_mode

    user_message_buffer[user_id] = []

    mode_message = f"–†–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: *{new_mode}*\n\n"
    if new_mode == SEND_MODE_MANUAL:
        mode_message += "–¢–µ–ø–µ—Ä—å –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å—Å—è. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å—ë', —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ö –≤ Gemini."
    else:
        mode_message += (
            "–¢–µ–ø–µ—Ä—å –∫–∞–∂–¥–æ–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ Gemini."
        )

    search_enabled = user_search_enabled.get(user_id, False)
    current_model = user_models.get(user_id, DEFAULT_MODEL)
    bot.send_message(
        chat_id,
        mode_message,
        reply_markup=get_main_keyboard(
            user_id, user_send_modes, search_enabled, current_model
        ),
        parse_mode="Markdown",
    )


@bot.message_handler(func=lambda message: message.text.startswith("–ü–æ–∏—Å–∫:"))
def handle_search_command(message):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ Google."""
    user_id = message.from_user.id

    if user_id not in user_search_enabled:
        user_search_enabled[user_id] = False

    user_search_enabled[user_id] = not user_search_enabled[user_id]

    search_enabled = user_search_enabled[user_id]
    current_model = user_models.get(user_id, DEFAULT_MODEL)
    search_status = "–í–∫–ª ‚úÖ" if search_enabled else "–í—ã–∫–ª ‚ùå"
    bot.reply_to(
        message,
        f"üîé –ü–æ–∏—Å–∫ Google —Ç–µ–ø–µ—Ä—å: *{search_status}*",
        parse_mode="Markdown",
        reply_markup=get_main_keyboard(
            user_id, user_send_modes, search_enabled, current_model
        ),
    )


@bot.message_handler(func=lambda message: message.text.startswith("–ú–æ–¥–µ–ª—å:"))
def select_model(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å"."""
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å Gemini:",
        reply_markup=get_model_selection_keyboard(),
    )


@bot.message_handler(func=lambda message: message.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å—ë")
def handle_send_all(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–µ–∫—Å—Ç –∏ —Ñ–æ—Ç–æ) –∏–∑ –±—É—Ñ–µ—Ä–∞, —Å–æ—Ö—Ä–∞–Ω—è—è —Ä–∞–∑—Ä—ã–≤—ã –º–µ–∂–¥—É —Ç–µ–∫—Å—Ç–∞–º–∏."""
    user_id = message.from_user.id
    chat_id = message.chat.id

    current_mode = user_send_modes.get(user_id, SEND_MODE_IMMEDIATE)
    if current_mode != SEND_MODE_MANUAL:
        search_enabled = user_search_enabled.get(user_id, False)
        current_model = user_models.get(user_id, DEFAULT_MODEL)
        bot.reply_to(
            message,
            f"–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ '{SEND_MODE_MANUAL}'. "
            f"–í–∞—à —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: '{current_mode}'. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /send_mode.",
            reply_markup=get_main_keyboard(
                user_id, user_send_modes, search_enabled, current_model
            ),
        )
        return

    buffered_items = user_message_buffer.get(user_id, [])

    if not buffered_items:
        search_enabled = user_search_enabled.get(user_id, False)
        current_model = user_models.get(user_id, DEFAULT_MODEL)
        bot.reply_to(
            message,
            "–ë—É—Ñ–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç. –ù–µ—á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å.",
            reply_markup=get_main_keyboard(
                user_id, user_send_modes, search_enabled, current_model
            ),
        )
        return

    if user_id not in user_chats:
        search_enabled = user_search_enabled.get(user_id, False)
        current_model = user_models.get(user_id, DEFAULT_MODEL)
        bot.reply_to(
            message,
            "–û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π —á–∞—Ç.",
            reply_markup=get_main_keyboard(
                user_id, user_send_modes, search_enabled, current_model
            ),
        )
        user_message_buffer[user_id] = []
        return

    combined_parts = []
    current_text_block = ""

    for item in buffered_items:
        if item["type"] == "text":

            if current_text_block:
                current_text_block += "\n\n" + item["content"]
            else:

                current_text_block = item["content"]
        elif item["type"] == "photo":

            if current_text_block:
                combined_parts.append(current_text_block)
                current_text_block = ""

            if item.get("caption"):
                combined_parts.append(item["caption"])
            combined_parts.append(item["image"])
        elif item["type"] == "document":
            if current_text_block:
                combined_parts.append(current_text_block)
                current_text_block = ""
            if item.get("caption"):
                combined_parts.append(item["caption"])
            try:
                combined_parts.append(
                    genai_types.Part.from_bytes(
                        mime_type=item["mime_type"], data=item["data"]
                    )
                )

                combined_parts.append(f"(–§–∞–π–ª: {item['filename']})")
            except Exception as file_err:
                bot.send_message(
                    chat_id,
                    f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª '{item['filename']}' –∏–∑ –±—É—Ñ–µ—Ä–∞ –≤ –∑–∞–ø—Ä–æ—Å: {file_err}",
                )

                continue

    if current_text_block:
        combined_parts.append(current_text_block)

    if not combined_parts:
        search_enabled = user_search_enabled.get(user_id, False)
        current_model = user_models.get(user_id, DEFAULT_MODEL)
        bot.reply_to(
            message,
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑ –±—É—Ñ–µ—Ä–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –ø—É—Å—Ç –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –ø—É—Å—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã).",
            reply_markup=get_main_keyboard(
                user_id, user_send_modes, search_enabled, current_model
            ),
        )
        user_message_buffer[user_id] = []
        return

    bot.send_chat_action(chat_id, "typing")
    status_msg = bot.reply_to(
        message, "–û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ñ–æ—Ç–æ –≤ Gemini..."
    )

    try:
        gemini_config = None
        if user_search_enabled.get(user_id, False):
            google_search_tool = Tool(google_search=GoogleSearch())
            gemini_config = GenerateContentConfig(tools=[google_search_tool])

        response = user_chats[user_id].send_message(
            message=combined_parts, config=gemini_config
        )
        raw_response_text = response.text

        sources_text = ""
        try:
            if (
                response.candidates
                and response.candidates[0].grounding_metadata
                and response.candidates[0].grounding_metadata.grounding_chunks
            ):
                sources = []
                for i, chunk in enumerate(
                    response.candidates[0].grounding_metadata.grounding_chunks
                ):
                    if hasattr(chunk, "web") and chunk.web.uri and chunk.web.title:
                        sources.append(f"{i+1}. [{chunk.web.title}]({chunk.web.uri})")
                    elif hasattr(chunk, "web") and chunk.web.uri:
                        sources.append(f"{i+1}. [{chunk.web.uri}]({chunk.web.uri})")

                if sources:
                    sources_text = "\n\n–ò—Å—Ç–æ—á–Ω–∏–∫–∏:\n" + "\n".join(sources)
                    raw_response_text += sources_text
        except (AttributeError, IndexError) as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏: {e}")

        user_message_buffer[user_id] = []
        user_last_responses[user_id] = raw_response_text

        try:
            bot.delete_message(chat_id, status_msg.message_id)
        except Exception:
            pass

        plain_response_text = markdown_to_text(raw_response_text)
        message_parts = split_long_message(plain_response_text)

        for i, part in enumerate(message_parts):
            if i == 0:
                bot.send_message(chat_id, part, reply_to_message_id=message.message_id)
            else:
                bot.send_message(chat_id, part)

        if len(message_parts) > 1:
            bot.send_message(
                chat_id,
                "–û—Ç–≤–µ—Ç –±—ã–ª —Ä–∞–∑–±–∏—Ç –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π.",
                reply_markup=get_file_download_keyboard(user_id),
            )

    except Exception as e:
        try:
            bot.delete_message(chat_id, status_msg.message_id)
        except Exception:
            pass
        bot.reply_to(
            message,
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e!s}\n\n"
            "–í–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ñ–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±—É—Ñ–µ—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—É—Ñ–µ—Ä–∞.",
            reply_markup=get_main_keyboard(
                user_id,
                user_send_modes,
                user_search_enabled.get(user_id, False),
                user_models.get(user_id, DEFAULT_MODEL),
            ),
        )

    except Exception as e:
        try:
            bot.delete_message(chat_id, status_msg.message_id)
        except Exception:
            pass
        bot.reply_to(
            message,
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e!s}\n\n"
            "–í–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ñ–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±—É—Ñ–µ—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—É—Ñ–µ—Ä–∞.",
            reply_markup=get_main_keyboard(
                user_id,
                user_send_modes,
                user_search_enabled.get(user_id, False),
                user_models.get(user_id, DEFAULT_MODEL),
            ),
        )


@bot.callback_query_handler(func=lambda call: call.data.startswith("get_file_"))
def handle_get_file(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞"."""
    user_id = int(call.data.split("_")[2])

    if user_last_responses.get(user_id):

        raw_response = user_last_responses[user_id]

        words = raw_response.split()
        filename = "_".join(words[:3]) + ".txt" if len(words) > 0 else "response.txt"
        filename = filename.replace("/", "_").replace("\\", "_").replace(":", "_")
        plain_text_response = markdown_to_text(raw_response)

        send_text_as_file(
            call.message.chat.id,
            plain_text_response,
            filename,
        )
        bot.answer_callback_query(call.id, text="–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    else:
        bot.answer_callback_query(
            call.id,
            text="–£ –º–µ–Ω—è –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞.",
        )


@bot.callback_query_handler(func=lambda call: call.data.startswith("model_"))
def handle_model_selection(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏."""
    user_id = call.from_user.id
    selected_model = call.data.replace("model_", "")

    user_models[user_id] = selected_model

    user_chats[user_id] = client.chats.create(model=user_models[user_id])
    user_last_responses[user_id] = None
    user_files_context[user_id] = []
    user_message_buffer[user_id] = []

    bot.answer_callback_query(call.id)
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=(
            f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {get_model_alias(selected_model)}\n\n"
            f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –æ—á–∏—â–µ–Ω."
        ),
    )

    search_enabled = user_search_enabled.get(user_id, False)
    current_model = user_models.get(user_id, DEFAULT_MODEL)
    bot.send_message(
        call.message.chat.id,
        "–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥.",
        reply_markup=get_main_keyboard(
            user_id, user_send_modes, search_enabled, current_model
        ),
    )


@bot.message_handler(content_types=["document"])
def handle_document(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∏–ø–æ–≤, —Å–æ—Ö—Ä–∞–Ω—è—è –∏—Ö –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç."""
    user_id = message.from_user.id
    chat_id = message.chat.id

    if user_id not in user_models:
        user_models[user_id] = DEFAULT_MODEL
        user_send_modes[user_id] = SEND_MODE_IMMEDIATE
        user_message_buffer[user_id] = []
        user_files_context[user_id] = []
        user_last_responses[user_id] = None
        user_search_enabled[user_id] = False
        bot.send_message(
            chat_id,
            "–ü–æ—Ö–æ–∂–µ, –º—ã –Ω–µ –æ–±—â–∞–ª–∏—Å—å —Ä–∞–Ω—å—à–µ. –ù–∞—á–∏–Ω–∞—é –Ω–æ–≤—ã–π —á–∞—Ç "
            f"—Å –º–æ–¥–µ–ª—å—é: {user_models[user_id]}.",
            reply_markup=get_main_keyboard(
                user_id,
                user_send_modes,
                user_search_enabled[user_id],
                user_models[user_id],
            ),
        )
        if user_id not in user_chats:
            try:
                user_chats[user_id] = client.chats.create(model=user_models[user_id])
            except Exception as e:
                bot.reply_to(
                    message, f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ: {e!s}"
                )
                return

    doc_mime_type = message.document.mime_type
    if doc_mime_type in SUPPORTED_MIME_TYPES:
        try:
            bot.send_chat_action(chat_id, "upload_document")
            file_info = bot.get_file(message.document.file_id)

            if file_info.file_size > MAX_FILE_SIZE_MB * 1024 * 1024:
                bot.reply_to(
                    message,
                    f"‚ùå –§–∞–π–ª '{message.document.file_name}' —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π "
                    f"(> {MAX_FILE_SIZE_MB} –ú–ë). –Ø –º–æ–≥—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ñ–∞–π–ª—ã —Ä–∞–∑–º–µ—Ä–æ–º –¥–æ {MAX_FILE_SIZE_MB} –ú–ë.",
                    reply_markup=get_main_keyboard(
                        user_id,
                        user_send_modes,
                        user_search_enabled.get(user_id, False),
                        user_models.get(user_id, DEFAULT_MODEL),
                    ),
                )
                return

            downloaded_file = bot.download_file(file_info.file_path)
            pdf_bytes = downloaded_file
            filename = message.document.file_name
            caption = message.caption or ""

            file_data = {
                "mime_type": doc_mime_type,
                "data": pdf_bytes,
                "filename": filename,
                "caption": caption,
            }

            if user_id not in user_files_context:
                user_files_context[user_id] = []
            user_files_context[user_id].append(file_data)
            context_count = len(user_files_context[user_id])

            current_mode = user_send_modes.get(user_id, SEND_MODE_IMMEDIATE)

            if current_mode == SEND_MODE_MANUAL:
                if user_id not in user_message_buffer:
                    user_message_buffer[user_id] = []
                user_message_buffer[user_id].append({**file_data, "type": "document"})
                buffer_count = len(user_message_buffer[user_id])
                file_type_short = doc_mime_type.split("/")[-1].upper()
                bot.reply_to(
                    message,
                    f"üìÑ –§–∞–π–ª '{filename}' ({file_type_short}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±—É—Ñ–µ—Ä ({buffer_count} —à—Ç.). "
                    + ("–ü–æ–¥–ø–∏—Å—å —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞.\n" if caption else "\n")
                    + f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: {context_count}.\n"
                    + "–ù–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å—ë', –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã.",
                    reply_markup=get_main_keyboard(
                        user_id,
                        user_send_modes,
                        user_search_enabled.get(user_id, False),
                        user_models.get(user_id, DEFAULT_MODEL),
                    ),
                )
            else:
                file_type_short = doc_mime_type.split("/")[-1].upper()
                bot.reply_to(
                    message,
                    f"‚úÖ –§–∞–π–ª '{filename}' ({file_type_short}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç (–≤—Å–µ–≥–æ: {context_count}). "
                    "–û–Ω –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ.",
                    reply_markup=get_main_keyboard(
                        user_id,
                        user_send_modes,
                        user_search_enabled.get(user_id, False),
                        user_models.get(user_id, DEFAULT_MODEL),
                    ),
                )

        except Exception as e:
            bot.reply_to(
                message,
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª '{message.document.file_name}': {e!s}",
                reply_markup=get_main_keyboard(
                    user_id,
                    user_send_modes,
                    user_search_enabled.get(user_id, False),
                    user_models.get(user_id, DEFAULT_MODEL),
                ),
            )
    else:
        supported_types_str = ", ".join(
            sorted(
                [
                    t.split("/")[-1].upper()
                    for t in SUPPORTED_MIME_TYPES
                    if not t.startswith("application/x")
                ]
            )
        )
        bot.reply_to(
            message,
            f"–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ—Ç —Ç–∏–ø —Ñ–∞–π–ª–∞ ({doc_mime_type}). \n–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã: {supported_types_str}",
            reply_markup=get_main_keyboard(
                user_id,
                user_send_modes,
                user_search_enabled.get(user_id, False),
                user_models.get(user_id, DEFAULT_MODEL),
            ),
        )


@bot.message_handler(content_types=["photo"])
def handle_photo(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞."""
    user_id = message.from_user.id
    chat_id = message.chat.id

    if user_id not in user_models:
        user_models[user_id] = DEFAULT_MODEL
        user_send_modes[user_id] = SEND_MODE_IMMEDIATE
        user_message_buffer[user_id] = []
        user_last_responses[user_id] = None
        user_search_enabled[user_id] = False
        bot.send_message(
            chat_id,
            "–ü–æ—Ö–æ–∂–µ, –º—ã –Ω–µ –æ–±—â–∞–ª–∏—Å—å —Ä–∞–Ω—å—à–µ. –ù–∞—á–∏–Ω–∞—é –Ω–æ–≤—ã–π —á–∞—Ç "
            f"—Å –º–æ–¥–µ–ª—å—é: {user_models[user_id]}.",
            reply_markup=get_main_keyboard(
                user_id,
                user_send_modes,
                user_search_enabled[user_id],
                user_models[user_id],
            ),
        )

        if user_id not in user_chats:
            try:
                user_chats[user_id] = client.chats.create(model=user_models[user_id])
            except Exception as e:
                bot.reply_to(
                    message, f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ñ–æ—Ç–æ: {e!s}"
                )
                return

    current_mode = user_send_modes.get(user_id, SEND_MODE_IMMEDIATE)

    file_id = message.photo[-1].file_id
    caption = message.caption if message.caption else ""
    if current_mode == SEND_MODE_MANUAL:
        try:
            bot.send_chat_action(chat_id, "typing")
            image_stream = download_telegram_image(file_id)
            img = Image.open(image_stream)

            if user_id not in user_message_buffer:
                user_message_buffer[user_id] = []
            user_message_buffer[user_id].append(
                {"type": "photo", "image": img, "caption": caption}
            )
            buffer_count = len(user_message_buffer[user_id])
            bot.reply_to(
                message,
                f"–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±—É—Ñ–µ—Ä ({buffer_count} —à—Ç.). "
                + ("–ü–æ–¥–ø–∏—Å—å —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞.\n" if caption else "\n")
                + "–ù–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å—ë', –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã.",
                reply_markup=get_main_keyboard(
                    user_id,
                    user_send_modes,
                    user_search_enabled.get(user_id, False),
                    user_models.get(user_id, DEFAULT_MODEL),
                ),
            )
        except Exception as e:
            bot.reply_to(
                message,
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –≤ –±—É—Ñ–µ—Ä: {e!s}",
                reply_markup=get_main_keyboard(
                    user_id,
                    user_send_modes,
                    user_search_enabled.get(user_id, False),
                    user_models.get(user_id, DEFAULT_MODEL),
                ),
            )
        return

    if user_id not in user_chats:
        try:

            user_chats[user_id] = client.chats.create(model=user_models[user_id])
            user_last_responses[user_id] = None
        except Exception as e:
            bot.reply_to(
                message,
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–æ—Ç–æ: {e!s}",
                reply_markup=get_main_keyboard(
                    user_id,
                    user_send_modes,
                    user_search_enabled.get(user_id, False),
                    user_models.get(user_id, DEFAULT_MODEL),
                ),
            )
            return

    bot.send_chat_action(chat_id, "typing")
    try:
        image_stream = download_telegram_image(file_id)
        img = Image.open(image_stream)

        api_message_parts = []
        effective_caption = caption if caption else "–û–ø–∏—à–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."
        api_message_parts.append(effective_caption)
        api_message_parts.append(img)

        chat_session = user_chats[user_id]
        response = chat_session.send_message(message=api_message_parts)

        raw_response_text = response.text
        user_last_responses[user_id] = raw_response_text

        plain_response_text = markdown_to_text(raw_response_text)
        message_parts = split_long_message(plain_response_text)

        for i, part in enumerate(message_parts):
            if i == 0:
                bot.reply_to(message, part)
            else:
                bot.send_message(chat_id, part)

        if len(message_parts) > 1:
            bot.send_message(
                chat_id,
                "–û—Ç–≤–µ—Ç –±—ã–ª —Ä–∞–∑–±–∏—Ç –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π.",
                reply_markup=get_file_download_keyboard(user_id),
            )

    except Exception as e:
        bot.reply_to(
            message,
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ({user_models.get(user_id, '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}): {e!s}\n\n"
            "–í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç.",
            reply_markup=get_main_keyboard(
                user_id,
                user_send_modes,
                user_search_enabled.get(user_id, False),
                user_models.get(user_id, DEFAULT_MODEL),
            ),
        )


@bot.message_handler(commands=["generate"])
def handle_generate_command(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /generate –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
    try:

        prompt = message.text.split("/generate", 1)[1].strip()

        if not prompt:
            bot.reply_to(
                message,
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /generate.\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: `/generate –∫—Ä–∞—Å–∏–≤—ã–π —Ä—ã–∂–∏–π –∫–æ—Ç`",
            )
            return

        user_id = message.from_user.id
        chat_id = message.chat.id

        bot.send_chat_action(chat_id, "upload_photo")
        bot.reply_to(message, f'–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É: "{prompt}"...')

        image_stream = generate_image_direct(prompt)

        if image_stream:
            bot.send_photo(
                chat_id,
                image_stream,
                caption=f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {prompt}",
                reply_to_message_id=message.message_id,
            )
        else:
            bot.reply_to(
                message,
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ "
                "–∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API.",
                reply_markup=get_main_keyboard(
                    user_id,
                    user_send_modes,
                    user_search_enabled.get(user_id, False),
                    user_models.get(user_id, DEFAULT_MODEL),
                ),
            )

    except IndexError:

        bot.reply_to(
            message,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /generate.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `/generate –∫—Ä–∞—Å–∏–≤—ã–π —Ä—ã–∂–∏–π –∫–æ—Ç`",
        )
    except Exception as e:
        print(f"Error during image generation command: {e}")
        bot.reply_to(
            message,
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e!s}",
            reply_markup=get_main_keyboard(
                user_id,
                user_send_modes,
                user_search_enabled.get(user_id, False),
                user_models.get(user_id, DEFAULT_MODEL),
            ),
        )


@bot.message_handler(
    func=lambda message: message.text
    and message.text.startswith("/")
    and message.text.split(" ", 1)[0][1:] in QUICK_TOOLS_CONFIG
)
def handle_quick_tool_command(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±—ã—Å—Ç—Ä—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ (–Ω–∞–ø—Ä., /translate, /prompt)."""
    chat_id = message.chat.id
    command_with_slash = message.text.split(" ", 1)[0]
    command = command_with_slash[1:]
    user_query = message.text.split(" ", 1)[1].strip() if " " in message.text else ""

    if not user_query:
        bot.reply_to(
            message,
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã {command_with_slash}.\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: `{command_with_slash} –≤–∞—à —Ç–µ–∫—Å—Ç –∑–¥–µ—Å—å`",
            parse_mode="Markdown",
        )
        return

    tool_config = QUICK_TOOLS_CONFIG[command]
    system_instruction = tool_config["system_instruction"]
    model_to_use = tool_config.get("model", DEFAULT_MODEL)

    bot.send_chat_action(chat_id, "typing")
    status_msg = bot.reply_to(message, f"–í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É `{command_with_slash}`...")

    try:
        response = client.models.generate_content(
            model=model_to_use,
            contents=user_query,
            config=genai_types.GenerateContentConfig(
                system_instruction=system_instruction
            ),
        )

        raw_response_text = response.text

        try:
            bot.delete_message(chat_id, status_msg.message_id)
        except Exception:
            pass

        plain_response_text = markdown_to_text(raw_response_text)
        message_parts = split_long_message(plain_response_text)

        for i, part in enumerate(message_parts):
            if i == 0:
                bot.reply_to(message, part)
            else:
                bot.send_message(chat_id, part)

    except Exception as e:
        try:
            bot.delete_message(chat_id, status_msg.message_id)
        except Exception:
            pass
        print(f"Error in quick tool command '{command}': {e}")
        bot.reply_to(
            message,
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã `{command_with_slash}`: {e!s}",
        )


@bot.message_handler(func=lambda message: True)
def handle_message(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–µ –∫–æ–º–∞–Ω–¥—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤)."""
    user_id = message.from_user.id
    chat_id = message.chat.id
    if user_id not in user_models:
        user_models[user_id] = DEFAULT_MODEL
        user_send_modes[user_id] = SEND_MODE_IMMEDIATE
        user_message_buffer[user_id] = []
        user_last_responses[user_id] = None
        user_search_enabled[user_id] = False

        try:
            pass

        except Exception as e:
            bot.reply_to(message, f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏: {e!s}")

    current_mode = user_send_modes.get(user_id, SEND_MODE_IMMEDIATE)

    if current_mode == SEND_MODE_MANUAL:
        if user_id not in user_message_buffer:
            user_message_buffer[user_id] = []
        user_message_buffer[user_id].append({"type": "text", "content": message.text})
        buffer_count = len(user_message_buffer[user_id])
        bot.reply_to(
            message,
            f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±—É—Ñ–µ—Ä ({buffer_count} —à—Ç.). –ù–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å—ë', –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã.",
        )
        return

    bot.send_chat_action(message.chat.id, "typing")

    try:

        api_message_parts = []

        files_in_context = user_files_context.get(user_id, [])
        if files_in_context:
            bot.send_message(
                chat_id,
                f"üìé –ò—Å–ø–æ–ª—å–∑—É—é {len(files_in_context)} —Ñ–∞–π–ª(–∞/–æ–≤) –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞...",
            )
            for file_info in files_in_context:

                if file_info["caption"]:
                    api_message_parts.append(file_info["caption"])

                try:
                    api_message_parts.append(
                        genai_types.Part.from_bytes(
                            mime_type=file_info["mime_type"], data=file_info["data"]
                        )
                    )

                    api_message_parts.append(f"(–§–∞–π–ª: {file_info['filename']})")
                except Exception as file_err:
                    bot.send_message(
                        chat_id,
                        f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª '{file_info['filename']}' –≤ –∑–∞–ø—Ä–æ—Å: {file_err}",
                    )

        api_message_parts.append(message.text)

        if user_id not in user_chats:

            try:
                model = genai.GenerativeModel(model_name=user_models[user_id])
                user_chats[user_id] = model.start_chat(history=[])
            except Exception as e:
                bot.reply_to(
                    message, f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π: {e!s}"
                )
                return

        gemini_config = None
        if user_search_enabled.get(user_id, False):
            google_search_tool = Tool(google_search=GoogleSearch())
            gemini_config = GenerateContentConfig(tools=[google_search_tool])

        response = user_chats[user_id].send_message(
            message=api_message_parts, config=gemini_config
        )

        raw_response_text = response.text

        sources_text = ""
        try:
            if (
                response.candidates
                and response.candidates[0].grounding_metadata
                and response.candidates[0].grounding_metadata.grounding_chunks
            ):
                sources = []
                for i, chunk in enumerate(
                    response.candidates[0].grounding_metadata.grounding_chunks
                ):
                    if hasattr(chunk, "web") and chunk.web.uri and chunk.web.title:
                        sources.append(f"{i+1}. [{chunk.web.title}]({chunk.web.uri})")
                    elif hasattr(chunk, "web") and chunk.web.uri:
                        sources.append(f"{i+1}. [{chunk.web.uri}]({chunk.web.uri})")

                if sources:
                    sources_text = "\n\n–ò—Å—Ç–æ—á–Ω–∏–∫–∏:\n" + "\n".join(sources)
                    raw_response_text += sources_text
        except (AttributeError, IndexError) as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏: {e}")

        user_last_responses[user_id] = raw_response_text

        plain_response_text = markdown_to_text(response.text) + sources_text
        message_parts = split_long_message(plain_response_text)

        for i, part in enumerate(message_parts):
            if i == 0:

                bot.reply_to(message, part)

            else:

                bot.send_message(message.chat.id, part)

        if len(message_parts) > 1:
            bot.send_message(
                message.chat.id,
                "–û—Ç–≤–µ—Ç –±—ã–ª —Ä–∞–∑–±–∏—Ç –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π.",
                reply_markup=get_file_download_keyboard(user_id),
            )
    except Exception as e:
        bot.reply_to(
            message,
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e!s}\n\n–í–æ–∑–º–æ–∂–Ω–æ —Å—Ç–æ–∏—Ç "
            f"–ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç.",
            reply_markup=get_main_keyboard(
                user_id,
                user_send_modes,
                user_search_enabled.get(user_id, False),
                user_models.get(user_id, DEFAULT_MODEL),
            ),
        )


if __name__ == "__main__":
    bot.polling(none_stop=True)
